/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HiveInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASE_DENOMINATOR"
      | "ONE_EPOCH"
      | "availableHoneyInHive"
      | "beeStatus"
      | "buzzkillAddressProvider"
      | "collectHoney"
      | "creator"
      | "endureRaid"
      | "forage"
      | "getAvailableHoneyInHive"
      | "getHivePoolMultiplier"
      | "getHiveResources"
      | "getUserClaimableHoney"
      | "habitatId"
      | "hiveDefense"
      | "hiveProductivity"
      | "hiveTotalIncentive"
      | "isBeeInAction"
      | "lastAvailableHoneyUpdateBlock"
      | "lastBaseIncentiveUpdateBlock"
      | "nectar"
      | "numQueens"
      | "numWorkers"
      | "onERC721Received"
      | "pollen"
      | "sap"
      | "stakeBee"
      | "startRaid"
      | "unstakeBee"
      | "updateHiveDefense"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollectHoney"
      | "ForageFinished"
      | "NFTStaked"
      | "NFTUnstaked"
      | "RaidFinished"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ONE_EPOCH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "availableHoneyInHive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beeStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buzzkillAddressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectHoney",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endureRaid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableHoneyInHive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHivePoolMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHiveResources",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserClaimableHoney",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "habitatId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hiveDefense",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hiveProductivity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hiveTotalIncentive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBeeInAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastAvailableHoneyUpdateBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastBaseIncentiveUpdateBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nectar", values?: undefined): string;
  encodeFunctionData(functionFragment: "numQueens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numWorkers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pollen", values?: undefined): string;
  encodeFunctionData(functionFragment: "sap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakeBee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startRaid",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeBee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHiveDefense",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ONE_EPOCH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableHoneyInHive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "beeStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buzzkillAddressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectHoney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endureRaid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "forage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableHoneyInHive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHivePoolMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHiveResources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserClaimableHoney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "habitatId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hiveDefense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hiveProductivity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hiveTotalIncentive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBeeInAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastAvailableHoneyUpdateBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastBaseIncentiveUpdateBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nectar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numQueens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numWorkers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pollen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeBee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startRaid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstakeBee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateHiveDefense",
    data: BytesLike
  ): Result;
}

export namespace CollectHoneyEvent {
  export type InputTuple = [tokenId: BigNumberish, honey: BigNumberish];
  export type OutputTuple = [tokenId: bigint, honey: bigint];
  export interface OutputObject {
    tokenId: bigint;
    honey: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForageFinishedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    nectar: BigNumberish,
    pollen: BigNumberish,
    sap: BigNumberish,
    productivityEarned: BigNumberish,
    experienceEarned: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    nectar: bigint,
    pollen: bigint,
    sap: bigint,
    productivityEarned: bigint,
    experienceEarned: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    nectar: bigint;
    pollen: bigint;
    sap: bigint;
    productivityEarned: bigint;
    experienceEarned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTStakedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NFTUnstakedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaidFinishedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    honey: BigNumberish,
    productivityEarned: BigNumberish,
    experienceEarned: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    honey: bigint,
    productivityEarned: bigint,
    experienceEarned: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    honey: bigint;
    productivityEarned: bigint;
    experienceEarned: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Hive extends BaseContract {
  connect(runner?: ContractRunner | null): Hive;
  waitForDeployment(): Promise<this>;

  interface: HiveInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  ONE_EPOCH: TypedContractMethod<[], [bigint], "view">;

  availableHoneyInHive: TypedContractMethod<[], [bigint], "view">;

  beeStatus: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        owner: string;
        beeId: bigint;
        beeProductivity: bigint;
        beeWorkIncentive: bigint;
        beeDefense: bigint;
        lastClaimedBlock: bigint;
      }
    ],
    "view"
  >;

  buzzkillAddressProvider: TypedContractMethod<[], [string], "view">;

  collectHoney: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  creator: TypedContractMethod<[], [string], "view">;

  endureRaid: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  forage: TypedContractMethod<
    [_tokenId: BigNumberish, _habitatId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAvailableHoneyInHive: TypedContractMethod<[], [bigint], "view">;

  getHivePoolMultiplier: TypedContractMethod<[], [bigint], "view">;

  getHiveResources: TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;

  getUserClaimableHoney: TypedContractMethod<
    [_tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  habitatId: TypedContractMethod<[], [bigint], "view">;

  hiveDefense: TypedContractMethod<[], [bigint], "view">;

  hiveProductivity: TypedContractMethod<[], [bigint], "view">;

  hiveTotalIncentive: TypedContractMethod<[], [bigint], "view">;

  isBeeInAction: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  lastAvailableHoneyUpdateBlock: TypedContractMethod<[], [bigint], "view">;

  lastBaseIncentiveUpdateBlock: TypedContractMethod<[], [bigint], "view">;

  nectar: TypedContractMethod<[], [bigint], "view">;

  numQueens: TypedContractMethod<[], [bigint], "view">;

  numWorkers: TypedContractMethod<[], [bigint], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  pollen: TypedContractMethod<[], [bigint], "view">;

  sap: TypedContractMethod<[], [bigint], "view">;

  stakeBee: TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  startRaid: TypedContractMethod<
    [_tokenId: BigNumberish, _raidedHive: AddressLike],
    [void],
    "nonpayable"
  >;

  unstakeBee: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateHiveDefense: TypedContractMethod<
    [_tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ONE_EPOCH"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "availableHoneyInHive"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "beeStatus"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, bigint] & {
        owner: string;
        beeId: bigint;
        beeProductivity: bigint;
        beeWorkIncentive: bigint;
        beeDefense: bigint;
        lastClaimedBlock: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "buzzkillAddressProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "collectHoney"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "creator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "endureRaid"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "forage"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _habitatId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvailableHoneyInHive"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHivePoolMultiplier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getHiveResources"
  ): TypedContractMethod<[], [[bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getUserClaimableHoney"
  ): TypedContractMethod<[_tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "habitatId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hiveDefense"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hiveProductivity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hiveTotalIncentive"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isBeeInAction"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastAvailableHoneyUpdateBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastBaseIncentiveUpdateBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nectar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numQueens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "numWorkers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "pollen"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stakeBee"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startRaid"
  ): TypedContractMethod<
    [_tokenId: BigNumberish, _raidedHive: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unstakeBee"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateHiveDefense"
  ): TypedContractMethod<[_tokenId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CollectHoney"
  ): TypedContractEvent<
    CollectHoneyEvent.InputTuple,
    CollectHoneyEvent.OutputTuple,
    CollectHoneyEvent.OutputObject
  >;
  getEvent(
    key: "ForageFinished"
  ): TypedContractEvent<
    ForageFinishedEvent.InputTuple,
    ForageFinishedEvent.OutputTuple,
    ForageFinishedEvent.OutputObject
  >;
  getEvent(
    key: "NFTStaked"
  ): TypedContractEvent<
    NFTStakedEvent.InputTuple,
    NFTStakedEvent.OutputTuple,
    NFTStakedEvent.OutputObject
  >;
  getEvent(
    key: "NFTUnstaked"
  ): TypedContractEvent<
    NFTUnstakedEvent.InputTuple,
    NFTUnstakedEvent.OutputTuple,
    NFTUnstakedEvent.OutputObject
  >;
  getEvent(
    key: "RaidFinished"
  ): TypedContractEvent<
    RaidFinishedEvent.InputTuple,
    RaidFinishedEvent.OutputTuple,
    RaidFinishedEvent.OutputObject
  >;

  filters: {
    "CollectHoney(uint256,uint256)": TypedContractEvent<
      CollectHoneyEvent.InputTuple,
      CollectHoneyEvent.OutputTuple,
      CollectHoneyEvent.OutputObject
    >;
    CollectHoney: TypedContractEvent<
      CollectHoneyEvent.InputTuple,
      CollectHoneyEvent.OutputTuple,
      CollectHoneyEvent.OutputObject
    >;

    "ForageFinished(uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ForageFinishedEvent.InputTuple,
      ForageFinishedEvent.OutputTuple,
      ForageFinishedEvent.OutputObject
    >;
    ForageFinished: TypedContractEvent<
      ForageFinishedEvent.InputTuple,
      ForageFinishedEvent.OutputTuple,
      ForageFinishedEvent.OutputObject
    >;

    "NFTStaked(uint256)": TypedContractEvent<
      NFTStakedEvent.InputTuple,
      NFTStakedEvent.OutputTuple,
      NFTStakedEvent.OutputObject
    >;
    NFTStaked: TypedContractEvent<
      NFTStakedEvent.InputTuple,
      NFTStakedEvent.OutputTuple,
      NFTStakedEvent.OutputObject
    >;

    "NFTUnstaked(uint256)": TypedContractEvent<
      NFTUnstakedEvent.InputTuple,
      NFTUnstakedEvent.OutputTuple,
      NFTUnstakedEvent.OutputObject
    >;
    NFTUnstaked: TypedContractEvent<
      NFTUnstakedEvent.InputTuple,
      NFTUnstakedEvent.OutputTuple,
      NFTUnstakedEvent.OutputObject
    >;

    "RaidFinished(uint256,uint256,uint256,uint256)": TypedContractEvent<
      RaidFinishedEvent.InputTuple,
      RaidFinishedEvent.OutputTuple,
      RaidFinishedEvent.OutputObject
    >;
    RaidFinished: TypedContractEvent<
      RaidFinishedEvent.InputTuple,
      RaidFinishedEvent.OutputTuple,
      RaidFinishedEvent.OutputObject
    >;
  };
}
