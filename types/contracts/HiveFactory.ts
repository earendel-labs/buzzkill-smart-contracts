/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface HiveFactoryInterface extends Interface {
  getFunction(
    nameOrSignature: "buzzkillAddressProvider" | "createHive" | "totalHives"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "HiveCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "buzzkillAddressProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createHive",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalHives",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "buzzkillAddressProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createHive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalHives", data: BytesLike): Result;
}

export namespace HiveCreatedEvent {
  export type InputTuple = [hiveId: BigNumberish, hiveAddress: AddressLike];
  export type OutputTuple = [hiveId: bigint, hiveAddress: string];
  export interface OutputObject {
    hiveId: bigint;
    hiveAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface HiveFactory extends BaseContract {
  connect(runner?: ContractRunner | null): HiveFactory;
  waitForDeployment(): Promise<this>;

  interface: HiveFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buzzkillAddressProvider: TypedContractMethod<[], [string], "view">;

  createHive: TypedContractMethod<
    [habitatId: BigNumberish],
    [string],
    "nonpayable"
  >;

  totalHives: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buzzkillAddressProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createHive"
  ): TypedContractMethod<[habitatId: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "totalHives"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "HiveCreated"
  ): TypedContractEvent<
    HiveCreatedEvent.InputTuple,
    HiveCreatedEvent.OutputTuple,
    HiveCreatedEvent.OutputObject
  >;

  filters: {
    "HiveCreated(uint256,address)": TypedContractEvent<
      HiveCreatedEvent.InputTuple,
      HiveCreatedEvent.OutputTuple,
      HiveCreatedEvent.OutputObject
    >;
    HiveCreated: TypedContractEvent<
      HiveCreatedEvent.InputTuple,
      HiveCreatedEvent.OutputTuple,
      HiveCreatedEvent.OutputObject
    >;
  };
}
