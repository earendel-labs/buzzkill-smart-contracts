/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface GameConfigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Cn"
      | "Cp"
      | "Cs"
      | "amountToLevelUp"
      | "baseHealthDeductionAfterRaid"
      | "baseHoneyRaidReward"
      | "baseHoneyYield"
      | "baseIncentivePerEpoch"
      | "beeEnergyRefreshInterval"
      | "beeHealthRefreshInterval"
      | "claimTimeInterval"
      | "experienceEarnedAfterForage"
      | "experienceEarnedAfterRaidFailed"
      | "experienceEarnedAfterRaidSuccess"
      | "foragePercentage"
      | "honeyYieldConstant"
      | "initialize"
      | "maxEnergyDeductionValue"
      | "maxQueen"
      | "maxResourcesValue"
      | "maxWorker"
      | "minEnergyDeductionValue"
      | "minResourcesValue"
      | "nectarRequiredToClaim"
      | "owner"
      | "productivityEarnAfterRaid"
      | "raidHoneyFee"
      | "raidSapFee"
      | "renounceOwnership"
      | "resourcesRefreshInterval"
      | "setAmountToLevelUp"
      | "setBaseHealthDeductionAfterRaid"
      | "setBaseHoneyRaidReward"
      | "setBaseHoneyYield"
      | "setBaseIncentivePerEpoch"
      | "setBeeEnergyRefreshInterval"
      | "setBeeHealthRefreshInterval"
      | "setClaimTimeInterval"
      | "setCn"
      | "setCp"
      | "setCs"
      | "setExperienceEarnedAfterForage"
      | "setExperienceEarnedAfterRaidFailed"
      | "setExperienceEarnedAfterRaidSuccess"
      | "setForagePercentage"
      | "setHoneyYieldConstant"
      | "setMaxEnergyDeductionValue"
      | "setMaxQueen"
      | "setMaxResourcesValue"
      | "setMaxWorker"
      | "setMinEnergyDeductionValue"
      | "setMinResourcesValue"
      | "setNectarRequiredToClaim"
      | "setProductivityEarnAfterRaid"
      | "setRaidHoneyFee"
      | "setRaidSapFee"
      | "setResourcesRefreshInterval"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AmountToLevelUpChanged"
      | "BaseHealthDeductionAfterRaidChanged"
      | "BaseHoneyRaidRewardChanged"
      | "BeeEnergyRefreshIntervalChanged"
      | "BeeHealthRefreshIntervalChanged"
      | "ClaimTimeIntervalChanged"
      | "CnChanged"
      | "CpChanged"
      | "CsChanged"
      | "ExperienceEarnedAfterForageChanged"
      | "ExperienceEarnedAfterRaidFailedChanged"
      | "ExperienceEarnedAfterRaidSuccessChanged"
      | "ForagePercentageChanged"
      | "HoneyYieldConstantChanged"
      | "Initialized"
      | "MaxEnergyDeductionValueChanged"
      | "MaxQueenChanged"
      | "MaxResourcesValueChanged"
      | "MaxWorkerChanged"
      | "MinEnergyDeductionValueChanged"
      | "MinResourcesValueChanged"
      | "NectarRequiredToClaimChanged"
      | "OwnershipTransferred"
      | "ProductivityEarnAfterRaidChanged"
      | "RaidHoneyFeeChanged"
      | "RaidSapFeeChanged"
      | "ResourcesRefreshIntervalChanged"
  ): EventFragment;

  encodeFunctionData(functionFragment: "Cn", values?: undefined): string;
  encodeFunctionData(functionFragment: "Cp", values?: undefined): string;
  encodeFunctionData(functionFragment: "Cs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "amountToLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseHealthDeductionAfterRaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseHoneyRaidReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseHoneyYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseIncentivePerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beeEnergyRefreshInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beeHealthRefreshInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTimeInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceEarnedAfterForage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceEarnedAfterRaidFailed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceEarnedAfterRaidSuccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "foragePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "honeyYieldConstant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxEnergyDeductionValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxQueen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxResourcesValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxWorker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minEnergyDeductionValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minResourcesValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nectarRequiredToClaim",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "productivityEarnAfterRaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raidHoneyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raidSapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resourcesRefreshInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountToLevelUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseHealthDeductionAfterRaid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseHoneyRaidReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseHoneyYield",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseIncentivePerEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBeeEnergyRefreshInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBeeHealthRefreshInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimTimeInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setCn", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setCp", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setCs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setExperienceEarnedAfterForage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExperienceEarnedAfterRaidFailed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExperienceEarnedAfterRaidSuccess",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setForagePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHoneyYieldConstant",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxEnergyDeductionValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxQueen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxResourcesValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWorker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinEnergyDeductionValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinResourcesValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNectarRequiredToClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProductivityEarnAfterRaid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRaidHoneyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRaidSapFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setResourcesRefreshInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "Cn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Cp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Cs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amountToLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseHealthDeductionAfterRaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseHoneyRaidReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseHoneyYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseIncentivePerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beeEnergyRefreshInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beeHealthRefreshInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTimeInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceEarnedAfterForage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceEarnedAfterRaidFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceEarnedAfterRaidSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foragePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "honeyYieldConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxEnergyDeductionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxQueen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxResourcesValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxWorker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minEnergyDeductionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minResourcesValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nectarRequiredToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "productivityEarnAfterRaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raidHoneyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raidSapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resourcesRefreshInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountToLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseHealthDeductionAfterRaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseHoneyRaidReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseHoneyYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseIncentivePerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeeEnergyRefreshInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeeHealthRefreshInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimTimeInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExperienceEarnedAfterForage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExperienceEarnedAfterRaidFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExperienceEarnedAfterRaidSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForagePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHoneyYieldConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxEnergyDeductionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxQueen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxResourcesValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinEnergyDeductionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinResourcesValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNectarRequiredToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProductivityEarnAfterRaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRaidHoneyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRaidSapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResourcesRefreshInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AmountToLevelUpChangedEvent {
  export type InputTuple = [newAmountToLevelUp: BigNumberish];
  export type OutputTuple = [newAmountToLevelUp: bigint];
  export interface OutputObject {
    newAmountToLevelUp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseHealthDeductionAfterRaidChangedEvent {
  export type InputTuple = [newBaseHealthDeductionAfterRaid: BigNumberish];
  export type OutputTuple = [newBaseHealthDeductionAfterRaid: bigint];
  export interface OutputObject {
    newBaseHealthDeductionAfterRaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BaseHoneyRaidRewardChangedEvent {
  export type InputTuple = [newBaseHoneyRaidReward: BigNumberish];
  export type OutputTuple = [newBaseHoneyRaidReward: bigint];
  export interface OutputObject {
    newBaseHoneyRaidReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeeEnergyRefreshIntervalChangedEvent {
  export type InputTuple = [newBeeEnergyRefreshInterval: BigNumberish];
  export type OutputTuple = [newBeeEnergyRefreshInterval: bigint];
  export interface OutputObject {
    newBeeEnergyRefreshInterval: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeeHealthRefreshIntervalChangedEvent {
  export type InputTuple = [newBeeHealthRefreshInterval: BigNumberish];
  export type OutputTuple = [newBeeHealthRefreshInterval: bigint];
  export interface OutputObject {
    newBeeHealthRefreshInterval: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimTimeIntervalChangedEvent {
  export type InputTuple = [newClaimTimeInterval: BigNumberish];
  export type OutputTuple = [newClaimTimeInterval: bigint];
  export interface OutputObject {
    newClaimTimeInterval: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CnChangedEvent {
  export type InputTuple = [newCn: BigNumberish];
  export type OutputTuple = [newCn: bigint];
  export interface OutputObject {
    newCn: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CpChangedEvent {
  export type InputTuple = [newCp: BigNumberish];
  export type OutputTuple = [newCp: bigint];
  export interface OutputObject {
    newCp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CsChangedEvent {
  export type InputTuple = [newCs: BigNumberish];
  export type OutputTuple = [newCs: bigint];
  export interface OutputObject {
    newCs: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExperienceEarnedAfterForageChangedEvent {
  export type InputTuple = [newExperienceEarnedAfterForage: BigNumberish];
  export type OutputTuple = [newExperienceEarnedAfterForage: bigint];
  export interface OutputObject {
    newExperienceEarnedAfterForage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExperienceEarnedAfterRaidFailedChangedEvent {
  export type InputTuple = [newExperienceEarnedAfterRaidFailed: BigNumberish];
  export type OutputTuple = [newExperienceEarnedAfterRaidFailed: bigint];
  export interface OutputObject {
    newExperienceEarnedAfterRaidFailed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExperienceEarnedAfterRaidSuccessChangedEvent {
  export type InputTuple = [newExperienceEarnedAfterRaidSuccess: BigNumberish];
  export type OutputTuple = [newExperienceEarnedAfterRaidSuccess: bigint];
  export interface OutputObject {
    newExperienceEarnedAfterRaidSuccess: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForagePercentageChangedEvent {
  export type InputTuple = [newForagePercentage: BigNumberish];
  export type OutputTuple = [newForagePercentage: bigint];
  export interface OutputObject {
    newForagePercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HoneyYieldConstantChangedEvent {
  export type InputTuple = [newHoneyYieldConstant: BigNumberish];
  export type OutputTuple = [newHoneyYieldConstant: bigint];
  export interface OutputObject {
    newHoneyYieldConstant: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxEnergyDeductionValueChangedEvent {
  export type InputTuple = [newMaxEnergyDeductionValue: BigNumberish];
  export type OutputTuple = [newMaxEnergyDeductionValue: bigint];
  export interface OutputObject {
    newMaxEnergyDeductionValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxQueenChangedEvent {
  export type InputTuple = [newMaxQueen: BigNumberish];
  export type OutputTuple = [newMaxQueen: bigint];
  export interface OutputObject {
    newMaxQueen: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxResourcesValueChangedEvent {
  export type InputTuple = [newMaxResourcesValue: BigNumberish];
  export type OutputTuple = [newMaxResourcesValue: bigint];
  export interface OutputObject {
    newMaxResourcesValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxWorkerChangedEvent {
  export type InputTuple = [newMaxWorker: BigNumberish];
  export type OutputTuple = [newMaxWorker: bigint];
  export interface OutputObject {
    newMaxWorker: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinEnergyDeductionValueChangedEvent {
  export type InputTuple = [newMinEnergyDeductionValue: BigNumberish];
  export type OutputTuple = [newMinEnergyDeductionValue: bigint];
  export interface OutputObject {
    newMinEnergyDeductionValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinResourcesValueChangedEvent {
  export type InputTuple = [newMinResourcesValue: BigNumberish];
  export type OutputTuple = [newMinResourcesValue: bigint];
  export interface OutputObject {
    newMinResourcesValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NectarRequiredToClaimChangedEvent {
  export type InputTuple = [newNectarRequiredToClaim: BigNumberish];
  export type OutputTuple = [newNectarRequiredToClaim: bigint];
  export interface OutputObject {
    newNectarRequiredToClaim: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductivityEarnAfterRaidChangedEvent {
  export type InputTuple = [newProductivityEarnAfterRaid: BigNumberish];
  export type OutputTuple = [newProductivityEarnAfterRaid: bigint];
  export interface OutputObject {
    newProductivityEarnAfterRaid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaidHoneyFeeChangedEvent {
  export type InputTuple = [newRaidHoneyFee: BigNumberish];
  export type OutputTuple = [newRaidHoneyFee: bigint];
  export interface OutputObject {
    newRaidHoneyFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaidSapFeeChangedEvent {
  export type InputTuple = [newRaidSapFee: BigNumberish];
  export type OutputTuple = [newRaidSapFee: bigint];
  export interface OutputObject {
    newRaidSapFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResourcesRefreshIntervalChangedEvent {
  export type InputTuple = [newResourcesRefreshInterval: BigNumberish];
  export type OutputTuple = [newResourcesRefreshInterval: bigint];
  export interface OutputObject {
    newResourcesRefreshInterval: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameConfig extends BaseContract {
  connect(runner?: ContractRunner | null): GameConfig;
  waitForDeployment(): Promise<this>;

  interface: GameConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Cn: TypedContractMethod<[], [bigint], "view">;

  Cp: TypedContractMethod<[], [bigint], "view">;

  Cs: TypedContractMethod<[], [bigint], "view">;

  amountToLevelUp: TypedContractMethod<[], [bigint], "view">;

  baseHealthDeductionAfterRaid: TypedContractMethod<[], [bigint], "view">;

  baseHoneyRaidReward: TypedContractMethod<[], [bigint], "view">;

  baseHoneyYield: TypedContractMethod<[], [bigint], "view">;

  baseIncentivePerEpoch: TypedContractMethod<[], [bigint], "view">;

  beeEnergyRefreshInterval: TypedContractMethod<[], [bigint], "view">;

  beeHealthRefreshInterval: TypedContractMethod<[], [bigint], "view">;

  claimTimeInterval: TypedContractMethod<[], [bigint], "view">;

  experienceEarnedAfterForage: TypedContractMethod<[], [bigint], "view">;

  experienceEarnedAfterRaidFailed: TypedContractMethod<[], [bigint], "view">;

  experienceEarnedAfterRaidSuccess: TypedContractMethod<[], [bigint], "view">;

  foragePercentage: TypedContractMethod<[], [bigint], "view">;

  honeyYieldConstant: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  maxEnergyDeductionValue: TypedContractMethod<[], [bigint], "view">;

  maxQueen: TypedContractMethod<[], [bigint], "view">;

  maxResourcesValue: TypedContractMethod<[], [bigint], "view">;

  maxWorker: TypedContractMethod<[], [bigint], "view">;

  minEnergyDeductionValue: TypedContractMethod<[], [bigint], "view">;

  minResourcesValue: TypedContractMethod<[], [bigint], "view">;

  nectarRequiredToClaim: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  productivityEarnAfterRaid: TypedContractMethod<[], [bigint], "view">;

  raidHoneyFee: TypedContractMethod<[], [bigint], "view">;

  raidSapFee: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resourcesRefreshInterval: TypedContractMethod<[], [bigint], "view">;

  setAmountToLevelUp: TypedContractMethod<
    [_amountToLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseHealthDeductionAfterRaid: TypedContractMethod<
    [_baseHealthDeductionAfterRaid: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseHoneyRaidReward: TypedContractMethod<
    [_baseHoneyRaidReward: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseHoneyYield: TypedContractMethod<
    [_baseHoneyYield: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseIncentivePerEpoch: TypedContractMethod<
    [_baseIncentivePerEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBeeEnergyRefreshInterval: TypedContractMethod<
    [_beeEnergyRefreshInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBeeHealthRefreshInterval: TypedContractMethod<
    [_beeHealthRefreshInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setClaimTimeInterval: TypedContractMethod<
    [_claimTimeInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCn: TypedContractMethod<[_Cn: BigNumberish], [void], "nonpayable">;

  setCp: TypedContractMethod<[_Cp: BigNumberish], [void], "nonpayable">;

  setCs: TypedContractMethod<[_Cs: BigNumberish], [void], "nonpayable">;

  setExperienceEarnedAfterForage: TypedContractMethod<
    [_experienceEarnedAfterForage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExperienceEarnedAfterRaidFailed: TypedContractMethod<
    [_experienceEarnedAfterRaidFailed: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExperienceEarnedAfterRaidSuccess: TypedContractMethod<
    [_experienceEarnedAfterRaidSuccess: BigNumberish],
    [void],
    "nonpayable"
  >;

  setForagePercentage: TypedContractMethod<
    [_foragePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setHoneyYieldConstant: TypedContractMethod<
    [_honeyYieldConstant: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxEnergyDeductionValue: TypedContractMethod<
    [_maxEnergyDeductionValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxQueen: TypedContractMethod<
    [_maxQueen: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxResourcesValue: TypedContractMethod<
    [_maxResourcesValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxWorker: TypedContractMethod<
    [_maxWorker: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinEnergyDeductionValue: TypedContractMethod<
    [_minEnergyDeductionValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinResourcesValue: TypedContractMethod<
    [_minResourcesValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNectarRequiredToClaim: TypedContractMethod<
    [_nectarRequiredToClaim: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProductivityEarnAfterRaid: TypedContractMethod<
    [_productivityEarnAfterRaid: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRaidHoneyFee: TypedContractMethod<
    [_raidHoneyFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRaidSapFee: TypedContractMethod<
    [_raidSapFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setResourcesRefreshInterval: TypedContractMethod<
    [_resourcesRefreshInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(nameOrSignature: "Cn"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "Cp"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "Cs"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountToLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseHealthDeductionAfterRaid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseHoneyRaidReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseHoneyYield"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseIncentivePerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "beeEnergyRefreshInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "beeHealthRefreshInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimTimeInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "experienceEarnedAfterForage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "experienceEarnedAfterRaidFailed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "experienceEarnedAfterRaidSuccess"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "foragePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "honeyYieldConstant"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxEnergyDeductionValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxQueen"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxResourcesValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWorker"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minEnergyDeductionValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minResourcesValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nectarRequiredToClaim"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "productivityEarnAfterRaid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "raidHoneyFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "raidSapFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resourcesRefreshInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAmountToLevelUp"
  ): TypedContractMethod<
    [_amountToLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseHealthDeductionAfterRaid"
  ): TypedContractMethod<
    [_baseHealthDeductionAfterRaid: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseHoneyRaidReward"
  ): TypedContractMethod<
    [_baseHoneyRaidReward: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseHoneyYield"
  ): TypedContractMethod<[_baseHoneyYield: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBaseIncentivePerEpoch"
  ): TypedContractMethod<
    [_baseIncentivePerEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBeeEnergyRefreshInterval"
  ): TypedContractMethod<
    [_beeEnergyRefreshInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBeeHealthRefreshInterval"
  ): TypedContractMethod<
    [_beeHealthRefreshInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setClaimTimeInterval"
  ): TypedContractMethod<
    [_claimTimeInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCn"
  ): TypedContractMethod<[_Cn: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCp"
  ): TypedContractMethod<[_Cp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCs"
  ): TypedContractMethod<[_Cs: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setExperienceEarnedAfterForage"
  ): TypedContractMethod<
    [_experienceEarnedAfterForage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExperienceEarnedAfterRaidFailed"
  ): TypedContractMethod<
    [_experienceEarnedAfterRaidFailed: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExperienceEarnedAfterRaidSuccess"
  ): TypedContractMethod<
    [_experienceEarnedAfterRaidSuccess: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setForagePercentage"
  ): TypedContractMethod<
    [_foragePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHoneyYieldConstant"
  ): TypedContractMethod<
    [_honeyYieldConstant: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxEnergyDeductionValue"
  ): TypedContractMethod<
    [_maxEnergyDeductionValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxQueen"
  ): TypedContractMethod<[_maxQueen: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxResourcesValue"
  ): TypedContractMethod<
    [_maxResourcesValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxWorker"
  ): TypedContractMethod<[_maxWorker: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinEnergyDeductionValue"
  ): TypedContractMethod<
    [_minEnergyDeductionValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinResourcesValue"
  ): TypedContractMethod<
    [_minResourcesValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNectarRequiredToClaim"
  ): TypedContractMethod<
    [_nectarRequiredToClaim: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProductivityEarnAfterRaid"
  ): TypedContractMethod<
    [_productivityEarnAfterRaid: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRaidHoneyFee"
  ): TypedContractMethod<[_raidHoneyFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRaidSapFee"
  ): TypedContractMethod<[_raidSapFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setResourcesRefreshInterval"
  ): TypedContractMethod<
    [_resourcesRefreshInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AmountToLevelUpChanged"
  ): TypedContractEvent<
    AmountToLevelUpChangedEvent.InputTuple,
    AmountToLevelUpChangedEvent.OutputTuple,
    AmountToLevelUpChangedEvent.OutputObject
  >;
  getEvent(
    key: "BaseHealthDeductionAfterRaidChanged"
  ): TypedContractEvent<
    BaseHealthDeductionAfterRaidChangedEvent.InputTuple,
    BaseHealthDeductionAfterRaidChangedEvent.OutputTuple,
    BaseHealthDeductionAfterRaidChangedEvent.OutputObject
  >;
  getEvent(
    key: "BaseHoneyRaidRewardChanged"
  ): TypedContractEvent<
    BaseHoneyRaidRewardChangedEvent.InputTuple,
    BaseHoneyRaidRewardChangedEvent.OutputTuple,
    BaseHoneyRaidRewardChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeeEnergyRefreshIntervalChanged"
  ): TypedContractEvent<
    BeeEnergyRefreshIntervalChangedEvent.InputTuple,
    BeeEnergyRefreshIntervalChangedEvent.OutputTuple,
    BeeEnergyRefreshIntervalChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeeHealthRefreshIntervalChanged"
  ): TypedContractEvent<
    BeeHealthRefreshIntervalChangedEvent.InputTuple,
    BeeHealthRefreshIntervalChangedEvent.OutputTuple,
    BeeHealthRefreshIntervalChangedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimTimeIntervalChanged"
  ): TypedContractEvent<
    ClaimTimeIntervalChangedEvent.InputTuple,
    ClaimTimeIntervalChangedEvent.OutputTuple,
    ClaimTimeIntervalChangedEvent.OutputObject
  >;
  getEvent(
    key: "CnChanged"
  ): TypedContractEvent<
    CnChangedEvent.InputTuple,
    CnChangedEvent.OutputTuple,
    CnChangedEvent.OutputObject
  >;
  getEvent(
    key: "CpChanged"
  ): TypedContractEvent<
    CpChangedEvent.InputTuple,
    CpChangedEvent.OutputTuple,
    CpChangedEvent.OutputObject
  >;
  getEvent(
    key: "CsChanged"
  ): TypedContractEvent<
    CsChangedEvent.InputTuple,
    CsChangedEvent.OutputTuple,
    CsChangedEvent.OutputObject
  >;
  getEvent(
    key: "ExperienceEarnedAfterForageChanged"
  ): TypedContractEvent<
    ExperienceEarnedAfterForageChangedEvent.InputTuple,
    ExperienceEarnedAfterForageChangedEvent.OutputTuple,
    ExperienceEarnedAfterForageChangedEvent.OutputObject
  >;
  getEvent(
    key: "ExperienceEarnedAfterRaidFailedChanged"
  ): TypedContractEvent<
    ExperienceEarnedAfterRaidFailedChangedEvent.InputTuple,
    ExperienceEarnedAfterRaidFailedChangedEvent.OutputTuple,
    ExperienceEarnedAfterRaidFailedChangedEvent.OutputObject
  >;
  getEvent(
    key: "ExperienceEarnedAfterRaidSuccessChanged"
  ): TypedContractEvent<
    ExperienceEarnedAfterRaidSuccessChangedEvent.InputTuple,
    ExperienceEarnedAfterRaidSuccessChangedEvent.OutputTuple,
    ExperienceEarnedAfterRaidSuccessChangedEvent.OutputObject
  >;
  getEvent(
    key: "ForagePercentageChanged"
  ): TypedContractEvent<
    ForagePercentageChangedEvent.InputTuple,
    ForagePercentageChangedEvent.OutputTuple,
    ForagePercentageChangedEvent.OutputObject
  >;
  getEvent(
    key: "HoneyYieldConstantChanged"
  ): TypedContractEvent<
    HoneyYieldConstantChangedEvent.InputTuple,
    HoneyYieldConstantChangedEvent.OutputTuple,
    HoneyYieldConstantChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MaxEnergyDeductionValueChanged"
  ): TypedContractEvent<
    MaxEnergyDeductionValueChangedEvent.InputTuple,
    MaxEnergyDeductionValueChangedEvent.OutputTuple,
    MaxEnergyDeductionValueChangedEvent.OutputObject
  >;
  getEvent(
    key: "MaxQueenChanged"
  ): TypedContractEvent<
    MaxQueenChangedEvent.InputTuple,
    MaxQueenChangedEvent.OutputTuple,
    MaxQueenChangedEvent.OutputObject
  >;
  getEvent(
    key: "MaxResourcesValueChanged"
  ): TypedContractEvent<
    MaxResourcesValueChangedEvent.InputTuple,
    MaxResourcesValueChangedEvent.OutputTuple,
    MaxResourcesValueChangedEvent.OutputObject
  >;
  getEvent(
    key: "MaxWorkerChanged"
  ): TypedContractEvent<
    MaxWorkerChangedEvent.InputTuple,
    MaxWorkerChangedEvent.OutputTuple,
    MaxWorkerChangedEvent.OutputObject
  >;
  getEvent(
    key: "MinEnergyDeductionValueChanged"
  ): TypedContractEvent<
    MinEnergyDeductionValueChangedEvent.InputTuple,
    MinEnergyDeductionValueChangedEvent.OutputTuple,
    MinEnergyDeductionValueChangedEvent.OutputObject
  >;
  getEvent(
    key: "MinResourcesValueChanged"
  ): TypedContractEvent<
    MinResourcesValueChangedEvent.InputTuple,
    MinResourcesValueChangedEvent.OutputTuple,
    MinResourcesValueChangedEvent.OutputObject
  >;
  getEvent(
    key: "NectarRequiredToClaimChanged"
  ): TypedContractEvent<
    NectarRequiredToClaimChangedEvent.InputTuple,
    NectarRequiredToClaimChangedEvent.OutputTuple,
    NectarRequiredToClaimChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProductivityEarnAfterRaidChanged"
  ): TypedContractEvent<
    ProductivityEarnAfterRaidChangedEvent.InputTuple,
    ProductivityEarnAfterRaidChangedEvent.OutputTuple,
    ProductivityEarnAfterRaidChangedEvent.OutputObject
  >;
  getEvent(
    key: "RaidHoneyFeeChanged"
  ): TypedContractEvent<
    RaidHoneyFeeChangedEvent.InputTuple,
    RaidHoneyFeeChangedEvent.OutputTuple,
    RaidHoneyFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "RaidSapFeeChanged"
  ): TypedContractEvent<
    RaidSapFeeChangedEvent.InputTuple,
    RaidSapFeeChangedEvent.OutputTuple,
    RaidSapFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "ResourcesRefreshIntervalChanged"
  ): TypedContractEvent<
    ResourcesRefreshIntervalChangedEvent.InputTuple,
    ResourcesRefreshIntervalChangedEvent.OutputTuple,
    ResourcesRefreshIntervalChangedEvent.OutputObject
  >;

  filters: {
    "AmountToLevelUpChanged(uint256)": TypedContractEvent<
      AmountToLevelUpChangedEvent.InputTuple,
      AmountToLevelUpChangedEvent.OutputTuple,
      AmountToLevelUpChangedEvent.OutputObject
    >;
    AmountToLevelUpChanged: TypedContractEvent<
      AmountToLevelUpChangedEvent.InputTuple,
      AmountToLevelUpChangedEvent.OutputTuple,
      AmountToLevelUpChangedEvent.OutputObject
    >;

    "BaseHealthDeductionAfterRaidChanged(uint256)": TypedContractEvent<
      BaseHealthDeductionAfterRaidChangedEvent.InputTuple,
      BaseHealthDeductionAfterRaidChangedEvent.OutputTuple,
      BaseHealthDeductionAfterRaidChangedEvent.OutputObject
    >;
    BaseHealthDeductionAfterRaidChanged: TypedContractEvent<
      BaseHealthDeductionAfterRaidChangedEvent.InputTuple,
      BaseHealthDeductionAfterRaidChangedEvent.OutputTuple,
      BaseHealthDeductionAfterRaidChangedEvent.OutputObject
    >;

    "BaseHoneyRaidRewardChanged(uint256)": TypedContractEvent<
      BaseHoneyRaidRewardChangedEvent.InputTuple,
      BaseHoneyRaidRewardChangedEvent.OutputTuple,
      BaseHoneyRaidRewardChangedEvent.OutputObject
    >;
    BaseHoneyRaidRewardChanged: TypedContractEvent<
      BaseHoneyRaidRewardChangedEvent.InputTuple,
      BaseHoneyRaidRewardChangedEvent.OutputTuple,
      BaseHoneyRaidRewardChangedEvent.OutputObject
    >;

    "BeeEnergyRefreshIntervalChanged(uint256)": TypedContractEvent<
      BeeEnergyRefreshIntervalChangedEvent.InputTuple,
      BeeEnergyRefreshIntervalChangedEvent.OutputTuple,
      BeeEnergyRefreshIntervalChangedEvent.OutputObject
    >;
    BeeEnergyRefreshIntervalChanged: TypedContractEvent<
      BeeEnergyRefreshIntervalChangedEvent.InputTuple,
      BeeEnergyRefreshIntervalChangedEvent.OutputTuple,
      BeeEnergyRefreshIntervalChangedEvent.OutputObject
    >;

    "BeeHealthRefreshIntervalChanged(uint256)": TypedContractEvent<
      BeeHealthRefreshIntervalChangedEvent.InputTuple,
      BeeHealthRefreshIntervalChangedEvent.OutputTuple,
      BeeHealthRefreshIntervalChangedEvent.OutputObject
    >;
    BeeHealthRefreshIntervalChanged: TypedContractEvent<
      BeeHealthRefreshIntervalChangedEvent.InputTuple,
      BeeHealthRefreshIntervalChangedEvent.OutputTuple,
      BeeHealthRefreshIntervalChangedEvent.OutputObject
    >;

    "ClaimTimeIntervalChanged(uint256)": TypedContractEvent<
      ClaimTimeIntervalChangedEvent.InputTuple,
      ClaimTimeIntervalChangedEvent.OutputTuple,
      ClaimTimeIntervalChangedEvent.OutputObject
    >;
    ClaimTimeIntervalChanged: TypedContractEvent<
      ClaimTimeIntervalChangedEvent.InputTuple,
      ClaimTimeIntervalChangedEvent.OutputTuple,
      ClaimTimeIntervalChangedEvent.OutputObject
    >;

    "CnChanged(uint256)": TypedContractEvent<
      CnChangedEvent.InputTuple,
      CnChangedEvent.OutputTuple,
      CnChangedEvent.OutputObject
    >;
    CnChanged: TypedContractEvent<
      CnChangedEvent.InputTuple,
      CnChangedEvent.OutputTuple,
      CnChangedEvent.OutputObject
    >;

    "CpChanged(uint256)": TypedContractEvent<
      CpChangedEvent.InputTuple,
      CpChangedEvent.OutputTuple,
      CpChangedEvent.OutputObject
    >;
    CpChanged: TypedContractEvent<
      CpChangedEvent.InputTuple,
      CpChangedEvent.OutputTuple,
      CpChangedEvent.OutputObject
    >;

    "CsChanged(uint256)": TypedContractEvent<
      CsChangedEvent.InputTuple,
      CsChangedEvent.OutputTuple,
      CsChangedEvent.OutputObject
    >;
    CsChanged: TypedContractEvent<
      CsChangedEvent.InputTuple,
      CsChangedEvent.OutputTuple,
      CsChangedEvent.OutputObject
    >;

    "ExperienceEarnedAfterForageChanged(uint256)": TypedContractEvent<
      ExperienceEarnedAfterForageChangedEvent.InputTuple,
      ExperienceEarnedAfterForageChangedEvent.OutputTuple,
      ExperienceEarnedAfterForageChangedEvent.OutputObject
    >;
    ExperienceEarnedAfterForageChanged: TypedContractEvent<
      ExperienceEarnedAfterForageChangedEvent.InputTuple,
      ExperienceEarnedAfterForageChangedEvent.OutputTuple,
      ExperienceEarnedAfterForageChangedEvent.OutputObject
    >;

    "ExperienceEarnedAfterRaidFailedChanged(uint256)": TypedContractEvent<
      ExperienceEarnedAfterRaidFailedChangedEvent.InputTuple,
      ExperienceEarnedAfterRaidFailedChangedEvent.OutputTuple,
      ExperienceEarnedAfterRaidFailedChangedEvent.OutputObject
    >;
    ExperienceEarnedAfterRaidFailedChanged: TypedContractEvent<
      ExperienceEarnedAfterRaidFailedChangedEvent.InputTuple,
      ExperienceEarnedAfterRaidFailedChangedEvent.OutputTuple,
      ExperienceEarnedAfterRaidFailedChangedEvent.OutputObject
    >;

    "ExperienceEarnedAfterRaidSuccessChanged(uint256)": TypedContractEvent<
      ExperienceEarnedAfterRaidSuccessChangedEvent.InputTuple,
      ExperienceEarnedAfterRaidSuccessChangedEvent.OutputTuple,
      ExperienceEarnedAfterRaidSuccessChangedEvent.OutputObject
    >;
    ExperienceEarnedAfterRaidSuccessChanged: TypedContractEvent<
      ExperienceEarnedAfterRaidSuccessChangedEvent.InputTuple,
      ExperienceEarnedAfterRaidSuccessChangedEvent.OutputTuple,
      ExperienceEarnedAfterRaidSuccessChangedEvent.OutputObject
    >;

    "ForagePercentageChanged(uint256)": TypedContractEvent<
      ForagePercentageChangedEvent.InputTuple,
      ForagePercentageChangedEvent.OutputTuple,
      ForagePercentageChangedEvent.OutputObject
    >;
    ForagePercentageChanged: TypedContractEvent<
      ForagePercentageChangedEvent.InputTuple,
      ForagePercentageChangedEvent.OutputTuple,
      ForagePercentageChangedEvent.OutputObject
    >;

    "HoneyYieldConstantChanged(uint256)": TypedContractEvent<
      HoneyYieldConstantChangedEvent.InputTuple,
      HoneyYieldConstantChangedEvent.OutputTuple,
      HoneyYieldConstantChangedEvent.OutputObject
    >;
    HoneyYieldConstantChanged: TypedContractEvent<
      HoneyYieldConstantChangedEvent.InputTuple,
      HoneyYieldConstantChangedEvent.OutputTuple,
      HoneyYieldConstantChangedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MaxEnergyDeductionValueChanged(uint256)": TypedContractEvent<
      MaxEnergyDeductionValueChangedEvent.InputTuple,
      MaxEnergyDeductionValueChangedEvent.OutputTuple,
      MaxEnergyDeductionValueChangedEvent.OutputObject
    >;
    MaxEnergyDeductionValueChanged: TypedContractEvent<
      MaxEnergyDeductionValueChangedEvent.InputTuple,
      MaxEnergyDeductionValueChangedEvent.OutputTuple,
      MaxEnergyDeductionValueChangedEvent.OutputObject
    >;

    "MaxQueenChanged(uint256)": TypedContractEvent<
      MaxQueenChangedEvent.InputTuple,
      MaxQueenChangedEvent.OutputTuple,
      MaxQueenChangedEvent.OutputObject
    >;
    MaxQueenChanged: TypedContractEvent<
      MaxQueenChangedEvent.InputTuple,
      MaxQueenChangedEvent.OutputTuple,
      MaxQueenChangedEvent.OutputObject
    >;

    "MaxResourcesValueChanged(uint256)": TypedContractEvent<
      MaxResourcesValueChangedEvent.InputTuple,
      MaxResourcesValueChangedEvent.OutputTuple,
      MaxResourcesValueChangedEvent.OutputObject
    >;
    MaxResourcesValueChanged: TypedContractEvent<
      MaxResourcesValueChangedEvent.InputTuple,
      MaxResourcesValueChangedEvent.OutputTuple,
      MaxResourcesValueChangedEvent.OutputObject
    >;

    "MaxWorkerChanged(uint256)": TypedContractEvent<
      MaxWorkerChangedEvent.InputTuple,
      MaxWorkerChangedEvent.OutputTuple,
      MaxWorkerChangedEvent.OutputObject
    >;
    MaxWorkerChanged: TypedContractEvent<
      MaxWorkerChangedEvent.InputTuple,
      MaxWorkerChangedEvent.OutputTuple,
      MaxWorkerChangedEvent.OutputObject
    >;

    "MinEnergyDeductionValueChanged(uint256)": TypedContractEvent<
      MinEnergyDeductionValueChangedEvent.InputTuple,
      MinEnergyDeductionValueChangedEvent.OutputTuple,
      MinEnergyDeductionValueChangedEvent.OutputObject
    >;
    MinEnergyDeductionValueChanged: TypedContractEvent<
      MinEnergyDeductionValueChangedEvent.InputTuple,
      MinEnergyDeductionValueChangedEvent.OutputTuple,
      MinEnergyDeductionValueChangedEvent.OutputObject
    >;

    "MinResourcesValueChanged(uint256)": TypedContractEvent<
      MinResourcesValueChangedEvent.InputTuple,
      MinResourcesValueChangedEvent.OutputTuple,
      MinResourcesValueChangedEvent.OutputObject
    >;
    MinResourcesValueChanged: TypedContractEvent<
      MinResourcesValueChangedEvent.InputTuple,
      MinResourcesValueChangedEvent.OutputTuple,
      MinResourcesValueChangedEvent.OutputObject
    >;

    "NectarRequiredToClaimChanged(uint256)": TypedContractEvent<
      NectarRequiredToClaimChangedEvent.InputTuple,
      NectarRequiredToClaimChangedEvent.OutputTuple,
      NectarRequiredToClaimChangedEvent.OutputObject
    >;
    NectarRequiredToClaimChanged: TypedContractEvent<
      NectarRequiredToClaimChangedEvent.InputTuple,
      NectarRequiredToClaimChangedEvent.OutputTuple,
      NectarRequiredToClaimChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProductivityEarnAfterRaidChanged(uint256)": TypedContractEvent<
      ProductivityEarnAfterRaidChangedEvent.InputTuple,
      ProductivityEarnAfterRaidChangedEvent.OutputTuple,
      ProductivityEarnAfterRaidChangedEvent.OutputObject
    >;
    ProductivityEarnAfterRaidChanged: TypedContractEvent<
      ProductivityEarnAfterRaidChangedEvent.InputTuple,
      ProductivityEarnAfterRaidChangedEvent.OutputTuple,
      ProductivityEarnAfterRaidChangedEvent.OutputObject
    >;

    "RaidHoneyFeeChanged(uint256)": TypedContractEvent<
      RaidHoneyFeeChangedEvent.InputTuple,
      RaidHoneyFeeChangedEvent.OutputTuple,
      RaidHoneyFeeChangedEvent.OutputObject
    >;
    RaidHoneyFeeChanged: TypedContractEvent<
      RaidHoneyFeeChangedEvent.InputTuple,
      RaidHoneyFeeChangedEvent.OutputTuple,
      RaidHoneyFeeChangedEvent.OutputObject
    >;

    "RaidSapFeeChanged(uint256)": TypedContractEvent<
      RaidSapFeeChangedEvent.InputTuple,
      RaidSapFeeChangedEvent.OutputTuple,
      RaidSapFeeChangedEvent.OutputObject
    >;
    RaidSapFeeChanged: TypedContractEvent<
      RaidSapFeeChangedEvent.InputTuple,
      RaidSapFeeChangedEvent.OutputTuple,
      RaidSapFeeChangedEvent.OutputObject
    >;

    "ResourcesRefreshIntervalChanged(uint256)": TypedContractEvent<
      ResourcesRefreshIntervalChangedEvent.InputTuple,
      ResourcesRefreshIntervalChangedEvent.OutputTuple,
      ResourcesRefreshIntervalChangedEvent.OutputObject
    >;
    ResourcesRefreshIntervalChanged: TypedContractEvent<
      ResourcesRefreshIntervalChangedEvent.InputTuple,
      ResourcesRefreshIntervalChangedEvent.OutputTuple,
      ResourcesRefreshIntervalChangedEvent.OutputObject
    >;
  };
}
