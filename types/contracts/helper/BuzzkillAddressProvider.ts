/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface BuzzkillAddressProviderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buzzkillNFTAddress"
      | "gameConfigAddress"
      | "hiveManagerAddress"
      | "honeyAddress"
      | "honeyDistributionAddress"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "setBuzzkillNFTAddress"
      | "setGameConfigAddress"
      | "setHiveManagerAddress"
      | "setHoneyAddress"
      | "setHoneyDistributionAddress"
      | "setWorldMapAddress"
      | "transferOwnership"
      | "worldMapAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Initialized" | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buzzkillNFTAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameConfigAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hiveManagerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "honeyAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "honeyDistributionAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBuzzkillNFTAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameConfigAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHiveManagerAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHoneyAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setHoneyDistributionAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorldMapAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "worldMapAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "buzzkillNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameConfigAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hiveManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "honeyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "honeyDistributionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuzzkillNFTAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameConfigAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHiveManagerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHoneyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHoneyDistributionAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWorldMapAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "worldMapAddress",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BuzzkillAddressProvider extends BaseContract {
  connect(runner?: ContractRunner | null): BuzzkillAddressProvider;
  waitForDeployment(): Promise<this>;

  interface: BuzzkillAddressProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buzzkillNFTAddress: TypedContractMethod<[], [string], "view">;

  gameConfigAddress: TypedContractMethod<[], [string], "view">;

  hiveManagerAddress: TypedContractMethod<[], [string], "view">;

  honeyAddress: TypedContractMethod<[], [string], "view">;

  honeyDistributionAddress: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBuzzkillNFTAddress: TypedContractMethod<
    [_buzzkillNFTAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setGameConfigAddress: TypedContractMethod<
    [_gameConfigAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setHiveManagerAddress: TypedContractMethod<
    [_hiveManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setHoneyAddress: TypedContractMethod<
    [_honeyAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setHoneyDistributionAddress: TypedContractMethod<
    [_honeyDistributionAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setWorldMapAddress: TypedContractMethod<
    [_worldMapAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  worldMapAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buzzkillNFTAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gameConfigAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hiveManagerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "honeyAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "honeyDistributionAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBuzzkillNFTAddress"
  ): TypedContractMethod<
    [_buzzkillNFTAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGameConfigAddress"
  ): TypedContractMethod<
    [_gameConfigAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHiveManagerAddress"
  ): TypedContractMethod<
    [_hiveManagerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHoneyAddress"
  ): TypedContractMethod<[_honeyAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setHoneyDistributionAddress"
  ): TypedContractMethod<
    [_honeyDistributionAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWorldMapAddress"
  ): TypedContractMethod<[_worldMapAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "worldMapAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
