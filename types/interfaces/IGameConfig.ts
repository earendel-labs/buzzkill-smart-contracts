/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IGameConfigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Cn"
      | "Cp"
      | "Cs"
      | "amountAttackIncreaseOnLevelUp"
      | "amountBaseProductivityIncreaseOnLevelUp"
      | "amountDefenseIncreaseOnLevelUp"
      | "amountEnergyIncreaseOnLevelUp"
      | "amountForageIncreaseOnLevelUp"
      | "amountHealthIncreaseOnLevelUp"
      | "amountMaxProductivityIncreaseOnLevelUp"
      | "amountToLevelUp"
      | "baseEnergyDeductionAfterRaid"
      | "baseHealthDeductionAfterRaid"
      | "baseHoneyRaidReward"
      | "baseHoneyYield"
      | "baseIncentivePerEpoch"
      | "baseNumberOfForagingQuest"
      | "baseNumberOfRaidQuest"
      | "baseNumberOfRaidSuccessQuest"
      | "baseNumberOfUpgradeQuest"
      | "beeEnergyRefreshInterval"
      | "beeHealthRefreshInterval"
      | "claimTimeInterval"
      | "differenceBetweenLevels"
      | "experienceEarnedAfterForage"
      | "experienceEarnedAfterRaidFailed"
      | "experienceEarnedAfterRaidSuccess"
      | "experienceEarnedAfterUpgrade"
      | "foragePercentage"
      | "honeyYieldConstant"
      | "incentiveEarnAfterRaid"
      | "maxQueen"
      | "maxResourcesValue"
      | "maxWorker"
      | "minResourcesValue"
      | "nectarRequiredToClaim"
      | "raidHoneyFee"
      | "raidSapFee"
      | "resourcesRefreshInterval"
      | "setAmountAttackIncreaseOnLevelUp"
      | "setAmountBaseProductivityIncreaseOnLevelUp"
      | "setAmountDefenseIncreaseOnLevelUp"
      | "setAmountEnergyIncreaseOnLevelUp"
      | "setAmountForageIncreaseOnLevelUp"
      | "setAmountHealthIncreaseOnLevelUp"
      | "setAmountMaxProductivityIncreaseOnLevelUp"
      | "setAmountToLevelUp"
      | "setBaseEnergyDeductionAfterRaid"
      | "setBaseHealthDeductionAfterRaid"
      | "setBaseHoneyRaidReward"
      | "setBaseHoneyYield"
      | "setBaseIncentivePerEpoch"
      | "setBaseNumberOfForagingQuest"
      | "setBaseNumberOfRaidQuest"
      | "setBaseNumberOfRaidSuccessQuest"
      | "setBaseNumberOfUpgradeQuest"
      | "setBeeEnergyRefreshInterval"
      | "setBeeHealthRefreshInterval"
      | "setClaimTimeInterval"
      | "setCn"
      | "setCp"
      | "setCs"
      | "setDifferenceBetweenLevels"
      | "setExperienceEarnedAfterForage"
      | "setExperienceEarnedAfterRaidFailed"
      | "setExperienceEarnedAfterRaidSuccess"
      | "setExperienceEarnedAfterUpgrade"
      | "setForagePercentage"
      | "setHoneyYieldConstant"
      | "setIncentiveEarnAfterRaid"
      | "setMaxQueen"
      | "setMaxResourcesValue"
      | "setMaxWorker"
      | "setMinResourcesValue"
      | "setNectarRequiredToClaim"
      | "setRaidHoneyFee"
      | "setRaidSapFee"
      | "setResourcesRefreshInterval"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Cn", values?: undefined): string;
  encodeFunctionData(functionFragment: "Cp", values?: undefined): string;
  encodeFunctionData(functionFragment: "Cs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "amountAttackIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountBaseProductivityIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountDefenseIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountEnergyIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountForageIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountHealthIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountMaxProductivityIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountToLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseEnergyDeductionAfterRaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseHealthDeductionAfterRaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseHoneyRaidReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseHoneyYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseIncentivePerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseNumberOfForagingQuest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseNumberOfRaidQuest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseNumberOfRaidSuccessQuest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseNumberOfUpgradeQuest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beeEnergyRefreshInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beeHealthRefreshInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTimeInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "differenceBetweenLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceEarnedAfterForage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceEarnedAfterRaidFailed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceEarnedAfterRaidSuccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceEarnedAfterUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "foragePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "honeyYieldConstant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveEarnAfterRaid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxQueen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxResourcesValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxWorker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minResourcesValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nectarRequiredToClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raidHoneyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raidSapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resourcesRefreshInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountAttackIncreaseOnLevelUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountBaseProductivityIncreaseOnLevelUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountDefenseIncreaseOnLevelUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountEnergyIncreaseOnLevelUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountForageIncreaseOnLevelUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountHealthIncreaseOnLevelUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountMaxProductivityIncreaseOnLevelUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountToLevelUp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseEnergyDeductionAfterRaid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseHealthDeductionAfterRaid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseHoneyRaidReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseHoneyYield",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseIncentivePerEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseNumberOfForagingQuest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseNumberOfRaidQuest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseNumberOfRaidSuccessQuest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseNumberOfUpgradeQuest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBeeEnergyRefreshInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBeeHealthRefreshInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setClaimTimeInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setCn", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setCp", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setCs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setDifferenceBetweenLevels",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExperienceEarnedAfterForage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExperienceEarnedAfterRaidFailed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExperienceEarnedAfterRaidSuccess",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExperienceEarnedAfterUpgrade",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setForagePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setHoneyYieldConstant",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncentiveEarnAfterRaid",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxQueen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxResourcesValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxWorker",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinResourcesValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNectarRequiredToClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRaidHoneyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRaidSapFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setResourcesRefreshInterval",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "Cn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Cp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Cs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amountAttackIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountBaseProductivityIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountDefenseIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountEnergyIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountForageIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountHealthIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountMaxProductivityIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountToLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseEnergyDeductionAfterRaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseHealthDeductionAfterRaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseHoneyRaidReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseHoneyYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseIncentivePerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseNumberOfForagingQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseNumberOfRaidQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseNumberOfRaidSuccessQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseNumberOfUpgradeQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beeEnergyRefreshInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beeHealthRefreshInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTimeInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "differenceBetweenLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceEarnedAfterForage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceEarnedAfterRaidFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceEarnedAfterRaidSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceEarnedAfterUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foragePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "honeyYieldConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveEarnAfterRaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxQueen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxResourcesValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxWorker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minResourcesValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nectarRequiredToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raidHoneyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raidSapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resourcesRefreshInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountAttackIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountBaseProductivityIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountDefenseIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountEnergyIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountForageIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountHealthIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountMaxProductivityIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountToLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseEnergyDeductionAfterRaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseHealthDeductionAfterRaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseHoneyRaidReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseHoneyYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseIncentivePerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseNumberOfForagingQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseNumberOfRaidQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseNumberOfRaidSuccessQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseNumberOfUpgradeQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeeEnergyRefreshInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeeHealthRefreshInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClaimTimeInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDifferenceBetweenLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExperienceEarnedAfterForage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExperienceEarnedAfterRaidFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExperienceEarnedAfterRaidSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExperienceEarnedAfterUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForagePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHoneyYieldConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncentiveEarnAfterRaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxQueen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxResourcesValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinResourcesValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNectarRequiredToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRaidHoneyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRaidSapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResourcesRefreshInterval",
    data: BytesLike
  ): Result;
}

export interface IGameConfig extends BaseContract {
  connect(runner?: ContractRunner | null): IGameConfig;
  waitForDeployment(): Promise<this>;

  interface: IGameConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Cn: TypedContractMethod<[], [bigint], "view">;

  Cp: TypedContractMethod<[], [bigint], "view">;

  Cs: TypedContractMethod<[], [bigint], "view">;

  amountAttackIncreaseOnLevelUp: TypedContractMethod<[], [bigint], "view">;

  amountBaseProductivityIncreaseOnLevelUp: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  amountDefenseIncreaseOnLevelUp: TypedContractMethod<[], [bigint], "view">;

  amountEnergyIncreaseOnLevelUp: TypedContractMethod<[], [bigint], "view">;

  amountForageIncreaseOnLevelUp: TypedContractMethod<[], [bigint], "view">;

  amountHealthIncreaseOnLevelUp: TypedContractMethod<[], [bigint], "view">;

  amountMaxProductivityIncreaseOnLevelUp: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  amountToLevelUp: TypedContractMethod<[], [bigint], "view">;

  baseEnergyDeductionAfterRaid: TypedContractMethod<[], [bigint], "view">;

  baseHealthDeductionAfterRaid: TypedContractMethod<[], [bigint], "view">;

  baseHoneyRaidReward: TypedContractMethod<[], [bigint], "view">;

  baseHoneyYield: TypedContractMethod<[], [bigint], "view">;

  baseIncentivePerEpoch: TypedContractMethod<[], [bigint], "view">;

  baseNumberOfForagingQuest: TypedContractMethod<[], [bigint], "view">;

  baseNumberOfRaidQuest: TypedContractMethod<[], [bigint], "view">;

  baseNumberOfRaidSuccessQuest: TypedContractMethod<[], [bigint], "view">;

  baseNumberOfUpgradeQuest: TypedContractMethod<[], [bigint], "view">;

  beeEnergyRefreshInterval: TypedContractMethod<[], [bigint], "view">;

  beeHealthRefreshInterval: TypedContractMethod<[], [bigint], "view">;

  claimTimeInterval: TypedContractMethod<[], [bigint], "view">;

  differenceBetweenLevels: TypedContractMethod<[], [bigint], "view">;

  experienceEarnedAfterForage: TypedContractMethod<[], [bigint], "view">;

  experienceEarnedAfterRaidFailed: TypedContractMethod<[], [bigint], "view">;

  experienceEarnedAfterRaidSuccess: TypedContractMethod<[], [bigint], "view">;

  experienceEarnedAfterUpgrade: TypedContractMethod<[], [bigint], "view">;

  foragePercentage: TypedContractMethod<[], [bigint], "view">;

  honeyYieldConstant: TypedContractMethod<[], [bigint], "view">;

  incentiveEarnAfterRaid: TypedContractMethod<[], [bigint], "view">;

  maxQueen: TypedContractMethod<[], [bigint], "view">;

  maxResourcesValue: TypedContractMethod<[], [bigint], "view">;

  maxWorker: TypedContractMethod<[], [bigint], "view">;

  minResourcesValue: TypedContractMethod<[], [bigint], "view">;

  nectarRequiredToClaim: TypedContractMethod<[], [bigint], "view">;

  raidHoneyFee: TypedContractMethod<[], [bigint], "view">;

  raidSapFee: TypedContractMethod<[], [bigint], "view">;

  resourcesRefreshInterval: TypedContractMethod<[], [bigint], "view">;

  setAmountAttackIncreaseOnLevelUp: TypedContractMethod<
    [_amountAttackIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAmountBaseProductivityIncreaseOnLevelUp: TypedContractMethod<
    [_amountBaseProductivityIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAmountDefenseIncreaseOnLevelUp: TypedContractMethod<
    [_amountDefenseIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAmountEnergyIncreaseOnLevelUp: TypedContractMethod<
    [_amountEnergyIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAmountForageIncreaseOnLevelUp: TypedContractMethod<
    [_amountForageIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAmountHealthIncreaseOnLevelUp: TypedContractMethod<
    [_amountHealthIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAmountMaxProductivityIncreaseOnLevelUp: TypedContractMethod<
    [_amountMaxProductivityIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setAmountToLevelUp: TypedContractMethod<
    [_amountToLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseEnergyDeductionAfterRaid: TypedContractMethod<
    [_baseEnergyDeductionAfterRaid: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseHealthDeductionAfterRaid: TypedContractMethod<
    [_baseHealthDeductionAfterRaid: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseHoneyRaidReward: TypedContractMethod<
    [_baseHoneyRaidReward: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseHoneyYield: TypedContractMethod<
    [_baseHoneyYield: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseIncentivePerEpoch: TypedContractMethod<
    [_baseIncentivePerEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseNumberOfForagingQuest: TypedContractMethod<
    [_baseNumberOfForagingQuest: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseNumberOfRaidQuest: TypedContractMethod<
    [_baseNumberOfRaidQuest: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseNumberOfRaidSuccessQuest: TypedContractMethod<
    [_baseNumberOfRaidSuccessQuest: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBaseNumberOfUpgradeQuest: TypedContractMethod<
    [_baseNumberOfUpgradeQuest: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBeeEnergyRefreshInterval: TypedContractMethod<
    [_beeEnergyRefreshInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setBeeHealthRefreshInterval: TypedContractMethod<
    [_beeHealthRefreshInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setClaimTimeInterval: TypedContractMethod<
    [_claimTimeInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  setCn: TypedContractMethod<[_Cn: BigNumberish], [void], "nonpayable">;

  setCp: TypedContractMethod<[_Cp: BigNumberish], [void], "nonpayable">;

  setCs: TypedContractMethod<[_Cs: BigNumberish], [void], "nonpayable">;

  setDifferenceBetweenLevels: TypedContractMethod<
    [_differenceBetweenLevels: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExperienceEarnedAfterForage: TypedContractMethod<
    [_experienceEarnedAfterForage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExperienceEarnedAfterRaidFailed: TypedContractMethod<
    [_experienceEarnedAfterRaidFailed: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExperienceEarnedAfterRaidSuccess: TypedContractMethod<
    [_experienceEarnedAfterRaidSuccess: BigNumberish],
    [void],
    "nonpayable"
  >;

  setExperienceEarnedAfterUpgrade: TypedContractMethod<
    [_experienceEarnedAfterUpgrade: BigNumberish],
    [void],
    "nonpayable"
  >;

  setForagePercentage: TypedContractMethod<
    [_foragePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setHoneyYieldConstant: TypedContractMethod<
    [_honeyYieldConstant: BigNumberish],
    [void],
    "nonpayable"
  >;

  setIncentiveEarnAfterRaid: TypedContractMethod<
    [_IncentiveEarnAfterRaid: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxQueen: TypedContractMethod<
    [_maxQueen: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxResourcesValue: TypedContractMethod<
    [_maxResourcesValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxWorker: TypedContractMethod<
    [_maxWorker: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinResourcesValue: TypedContractMethod<
    [_minResourcesValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNectarRequiredToClaim: TypedContractMethod<
    [_nectarRequiredToClaim: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRaidHoneyFee: TypedContractMethod<
    [_raidHoneyFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRaidSapFee: TypedContractMethod<
    [_raidSapFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setResourcesRefreshInterval: TypedContractMethod<
    [_resourcesRefreshInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(nameOrSignature: "Cn"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "Cp"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "Cs"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountAttackIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountBaseProductivityIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountDefenseIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountEnergyIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountForageIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountHealthIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountMaxProductivityIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountToLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseEnergyDeductionAfterRaid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseHealthDeductionAfterRaid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseHoneyRaidReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseHoneyYield"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseIncentivePerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseNumberOfForagingQuest"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseNumberOfRaidQuest"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseNumberOfRaidSuccessQuest"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseNumberOfUpgradeQuest"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "beeEnergyRefreshInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "beeHealthRefreshInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimTimeInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "differenceBetweenLevels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "experienceEarnedAfterForage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "experienceEarnedAfterRaidFailed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "experienceEarnedAfterRaidSuccess"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "experienceEarnedAfterUpgrade"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "foragePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "honeyYieldConstant"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "incentiveEarnAfterRaid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxQueen"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxResourcesValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWorker"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minResourcesValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nectarRequiredToClaim"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "raidHoneyFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "raidSapFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resourcesRefreshInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setAmountAttackIncreaseOnLevelUp"
  ): TypedContractMethod<
    [_amountAttackIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAmountBaseProductivityIncreaseOnLevelUp"
  ): TypedContractMethod<
    [_amountBaseProductivityIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAmountDefenseIncreaseOnLevelUp"
  ): TypedContractMethod<
    [_amountDefenseIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAmountEnergyIncreaseOnLevelUp"
  ): TypedContractMethod<
    [_amountEnergyIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAmountForageIncreaseOnLevelUp"
  ): TypedContractMethod<
    [_amountForageIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAmountHealthIncreaseOnLevelUp"
  ): TypedContractMethod<
    [_amountHealthIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAmountMaxProductivityIncreaseOnLevelUp"
  ): TypedContractMethod<
    [_amountMaxProductivityIncreaseOnLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setAmountToLevelUp"
  ): TypedContractMethod<
    [_amountToLevelUp: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseEnergyDeductionAfterRaid"
  ): TypedContractMethod<
    [_baseEnergyDeductionAfterRaid: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseHealthDeductionAfterRaid"
  ): TypedContractMethod<
    [_baseHealthDeductionAfterRaid: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseHoneyRaidReward"
  ): TypedContractMethod<
    [_baseHoneyRaidReward: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseHoneyYield"
  ): TypedContractMethod<[_baseHoneyYield: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBaseIncentivePerEpoch"
  ): TypedContractMethod<
    [_baseIncentivePerEpoch: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseNumberOfForagingQuest"
  ): TypedContractMethod<
    [_baseNumberOfForagingQuest: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseNumberOfRaidQuest"
  ): TypedContractMethod<
    [_baseNumberOfRaidQuest: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseNumberOfRaidSuccessQuest"
  ): TypedContractMethod<
    [_baseNumberOfRaidSuccessQuest: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBaseNumberOfUpgradeQuest"
  ): TypedContractMethod<
    [_baseNumberOfUpgradeQuest: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBeeEnergyRefreshInterval"
  ): TypedContractMethod<
    [_beeEnergyRefreshInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBeeHealthRefreshInterval"
  ): TypedContractMethod<
    [_beeHealthRefreshInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setClaimTimeInterval"
  ): TypedContractMethod<
    [_claimTimeInterval: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCn"
  ): TypedContractMethod<[_Cn: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCp"
  ): TypedContractMethod<[_Cp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setCs"
  ): TypedContractMethod<[_Cs: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDifferenceBetweenLevels"
  ): TypedContractMethod<
    [_differenceBetweenLevels: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExperienceEarnedAfterForage"
  ): TypedContractMethod<
    [_experienceEarnedAfterForage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExperienceEarnedAfterRaidFailed"
  ): TypedContractMethod<
    [_experienceEarnedAfterRaidFailed: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExperienceEarnedAfterRaidSuccess"
  ): TypedContractMethod<
    [_experienceEarnedAfterRaidSuccess: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExperienceEarnedAfterUpgrade"
  ): TypedContractMethod<
    [_experienceEarnedAfterUpgrade: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setForagePercentage"
  ): TypedContractMethod<
    [_foragePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setHoneyYieldConstant"
  ): TypedContractMethod<
    [_honeyYieldConstant: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setIncentiveEarnAfterRaid"
  ): TypedContractMethod<
    [_IncentiveEarnAfterRaid: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxQueen"
  ): TypedContractMethod<[_maxQueen: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxResourcesValue"
  ): TypedContractMethod<
    [_maxResourcesValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxWorker"
  ): TypedContractMethod<[_maxWorker: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinResourcesValue"
  ): TypedContractMethod<
    [_minResourcesValue: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNectarRequiredToClaim"
  ): TypedContractMethod<
    [_nectarRequiredToClaim: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRaidHoneyFee"
  ): TypedContractMethod<[_raidHoneyFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRaidSapFee"
  ): TypedContractMethod<[_raidSapFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setResourcesRefreshInterval"
  ): TypedContractMethod<
    [_resourcesRefreshInterval: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
