/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IGameConfigInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Cn"
      | "Cp"
      | "Cs"
      | "amountAttackIncreaseOnLevelUp"
      | "amountBaseProductivityIncreaseOnLevelUp"
      | "amountDefenseIncreaseOnLevelUp"
      | "amountEnergyIncreaseOnLevelUp"
      | "amountForageIncreaseOnLevelUp"
      | "amountHealthIncreaseOnLevelUp"
      | "amountMaxProductivityIncreaseOnLevelUp"
      | "amountToLevelUp"
      | "baseEnergyDeductionAfterRaid"
      | "baseEnergyDeductionAfterUpgrade"
      | "baseHealthDeductionAfterRaid"
      | "baseHoneyRaidReward"
      | "baseHoneyYield"
      | "baseIncentivePerEpoch"
      | "baseNectarUsePerUpgrade"
      | "baseNumberOfForagingQuest"
      | "baseNumberOfRaidQuest"
      | "baseNumberOfRaidSuccessQuest"
      | "baseNumberOfUpgradeQuest"
      | "basePollenUsePerUpgrade"
      | "baseSapUsePerUpgrade"
      | "beeEnergyRefreshInterval"
      | "beeHealthRefreshInterval"
      | "claimTimeInterval"
      | "differenceBetweenLevels"
      | "experienceEarnedAfterForage"
      | "experienceEarnedAfterRaidFailed"
      | "experienceEarnedAfterRaidSuccess"
      | "experienceEarnedAfterUpgrade"
      | "foragePercentage"
      | "honeyYieldConstant"
      | "incentiveEarnAfterRaid"
      | "maxQueen"
      | "maxResourcesValue"
      | "maxWorker"
      | "minResourcesValue"
      | "nectarRequiredToClaim"
      | "raidHoneyFee"
      | "raidSapFee"
      | "resourcesRefreshInterval"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "Cn", values?: undefined): string;
  encodeFunctionData(functionFragment: "Cp", values?: undefined): string;
  encodeFunctionData(functionFragment: "Cs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "amountAttackIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountBaseProductivityIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountDefenseIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountEnergyIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountForageIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountHealthIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountMaxProductivityIncreaseOnLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountToLevelUp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseEnergyDeductionAfterRaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseEnergyDeductionAfterUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseHealthDeductionAfterRaid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseHoneyRaidReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseHoneyYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseIncentivePerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseNectarUsePerUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseNumberOfForagingQuest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseNumberOfRaidQuest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseNumberOfRaidSuccessQuest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseNumberOfUpgradeQuest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "basePollenUsePerUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseSapUsePerUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beeEnergyRefreshInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beeHealthRefreshInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimTimeInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "differenceBetweenLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceEarnedAfterForage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceEarnedAfterRaidFailed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceEarnedAfterRaidSuccess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "experienceEarnedAfterUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "foragePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "honeyYieldConstant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incentiveEarnAfterRaid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxQueen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxResourcesValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxWorker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minResourcesValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nectarRequiredToClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raidHoneyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raidSapFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resourcesRefreshInterval",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "Cn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Cp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Cs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amountAttackIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountBaseProductivityIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountDefenseIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountEnergyIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountForageIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountHealthIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountMaxProductivityIncreaseOnLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountToLevelUp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseEnergyDeductionAfterRaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseEnergyDeductionAfterUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseHealthDeductionAfterRaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseHoneyRaidReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseHoneyYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseIncentivePerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseNectarUsePerUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseNumberOfForagingQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseNumberOfRaidQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseNumberOfRaidSuccessQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseNumberOfUpgradeQuest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "basePollenUsePerUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseSapUsePerUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beeEnergyRefreshInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beeHealthRefreshInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTimeInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "differenceBetweenLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceEarnedAfterForage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceEarnedAfterRaidFailed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceEarnedAfterRaidSuccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "experienceEarnedAfterUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "foragePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "honeyYieldConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incentiveEarnAfterRaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxQueen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxResourcesValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxWorker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minResourcesValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nectarRequiredToClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raidHoneyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raidSapFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resourcesRefreshInterval",
    data: BytesLike
  ): Result;
}

export interface IGameConfig extends BaseContract {
  connect(runner?: ContractRunner | null): IGameConfig;
  waitForDeployment(): Promise<this>;

  interface: IGameConfigInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Cn: TypedContractMethod<[], [bigint], "view">;

  Cp: TypedContractMethod<[], [bigint], "view">;

  Cs: TypedContractMethod<[], [bigint], "view">;

  amountAttackIncreaseOnLevelUp: TypedContractMethod<[], [bigint], "view">;

  amountBaseProductivityIncreaseOnLevelUp: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  amountDefenseIncreaseOnLevelUp: TypedContractMethod<[], [bigint], "view">;

  amountEnergyIncreaseOnLevelUp: TypedContractMethod<[], [bigint], "view">;

  amountForageIncreaseOnLevelUp: TypedContractMethod<[], [bigint], "view">;

  amountHealthIncreaseOnLevelUp: TypedContractMethod<[], [bigint], "view">;

  amountMaxProductivityIncreaseOnLevelUp: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  amountToLevelUp: TypedContractMethod<[], [bigint], "view">;

  baseEnergyDeductionAfterRaid: TypedContractMethod<[], [bigint], "view">;

  baseEnergyDeductionAfterUpgrade: TypedContractMethod<[], [bigint], "view">;

  baseHealthDeductionAfterRaid: TypedContractMethod<[], [bigint], "view">;

  baseHoneyRaidReward: TypedContractMethod<[], [bigint], "view">;

  baseHoneyYield: TypedContractMethod<[], [bigint], "view">;

  baseIncentivePerEpoch: TypedContractMethod<[], [bigint], "view">;

  baseNectarUsePerUpgrade: TypedContractMethod<[], [bigint], "view">;

  baseNumberOfForagingQuest: TypedContractMethod<[], [bigint], "view">;

  baseNumberOfRaidQuest: TypedContractMethod<[], [bigint], "view">;

  baseNumberOfRaidSuccessQuest: TypedContractMethod<[], [bigint], "view">;

  baseNumberOfUpgradeQuest: TypedContractMethod<[], [bigint], "view">;

  basePollenUsePerUpgrade: TypedContractMethod<[], [bigint], "view">;

  baseSapUsePerUpgrade: TypedContractMethod<[], [bigint], "view">;

  beeEnergyRefreshInterval: TypedContractMethod<[], [bigint], "view">;

  beeHealthRefreshInterval: TypedContractMethod<[], [bigint], "view">;

  claimTimeInterval: TypedContractMethod<[], [bigint], "view">;

  differenceBetweenLevels: TypedContractMethod<[], [bigint], "view">;

  experienceEarnedAfterForage: TypedContractMethod<[], [bigint], "view">;

  experienceEarnedAfterRaidFailed: TypedContractMethod<[], [bigint], "view">;

  experienceEarnedAfterRaidSuccess: TypedContractMethod<[], [bigint], "view">;

  experienceEarnedAfterUpgrade: TypedContractMethod<[], [bigint], "view">;

  foragePercentage: TypedContractMethod<[], [bigint], "view">;

  honeyYieldConstant: TypedContractMethod<[], [bigint], "view">;

  incentiveEarnAfterRaid: TypedContractMethod<[], [bigint], "view">;

  maxQueen: TypedContractMethod<[], [bigint], "view">;

  maxResourcesValue: TypedContractMethod<[], [bigint], "view">;

  maxWorker: TypedContractMethod<[], [bigint], "view">;

  minResourcesValue: TypedContractMethod<[], [bigint], "view">;

  nectarRequiredToClaim: TypedContractMethod<[], [bigint], "view">;

  raidHoneyFee: TypedContractMethod<[], [bigint], "view">;

  raidSapFee: TypedContractMethod<[], [bigint], "view">;

  resourcesRefreshInterval: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(nameOrSignature: "Cn"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "Cp"): TypedContractMethod<[], [bigint], "view">;
  getFunction(nameOrSignature: "Cs"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountAttackIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountBaseProductivityIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountDefenseIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountEnergyIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountForageIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountHealthIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountMaxProductivityIncreaseOnLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "amountToLevelUp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseEnergyDeductionAfterRaid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseEnergyDeductionAfterUpgrade"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseHealthDeductionAfterRaid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseHoneyRaidReward"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseHoneyYield"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseIncentivePerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseNectarUsePerUpgrade"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseNumberOfForagingQuest"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseNumberOfRaidQuest"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseNumberOfRaidSuccessQuest"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseNumberOfUpgradeQuest"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "basePollenUsePerUpgrade"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseSapUsePerUpgrade"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "beeEnergyRefreshInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "beeHealthRefreshInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimTimeInterval"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "differenceBetweenLevels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "experienceEarnedAfterForage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "experienceEarnedAfterRaidFailed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "experienceEarnedAfterRaidSuccess"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "experienceEarnedAfterUpgrade"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "foragePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "honeyYieldConstant"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "incentiveEarnAfterRaid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxQueen"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxResourcesValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWorker"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minResourcesValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nectarRequiredToClaim"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "raidHoneyFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "raidSapFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "resourcesRefreshInterval"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
